
API
/battleships/users/:USER_ID -> get
/battleships/users -> post -> create user

/battleships/games/search -> get busqueda de juegos user_id puede ser un parametro status

x-user-id
/battleships/games -> post crea un juego nuevo

/battleships/games/:GAME_ID -> post se une al juego
/battleships/games/:GAME_ID -> put de

/battleships/games/:GAME_ID -> get trae los datos del juego
/battleships/games/:GAME_ID/boards -> get trae los datos del tablero
/battleships/games/:GAME_ID/boards/:BOARD_ID/shots -> post dispara el player { cell: {x: 22, y: 333} }
/battleships/games/:GAME_ID/boards/:BOARD_ID/shots -> get disparos a ese board

/battleships/games/:GAME_ID/shots -> get lista de shots de todos los boards

/battleships/games/:GAME_ID/shots -> post dispara, y devuelve un status: missed | damaged | shunk


Game {
  end_date
  date_created
  last_updated
  status: in_game | waiting_for_opponent | ended | cancelled
  players: [foreinge keys a players]
}

Player

  tiene un tablero
  puede disparar a un tablero de un juego, contrain solo al juego al que pertenece y que no sea el suyo
  pertenece a un juego



Player {
  gameId
  boardId
  status: winner | looser | waiting_for_opponent
  board: [foreinge keys] a board
  Shots {

  }

  shot()
}

Shots
  los disparos que hace el jugador

Shots {
  Cells -> lista de celdas donde fue el disparo
  toTarget: false | true
}

Board
  tiene barcos del player
  tiene celdas

Ships
  tienen una longitud
  una orientacion
  una posicion

Game | Battleship


